generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String                @id @default(cuid())
  name                   String
  email                  String                @unique
  password               String?
  emailVerified          Boolean?
  image                  String?
  createdAt              DateTime              @default(now())
  updatedAt              DateTime              @updatedAt
  resetPasswordToken     String?
  resetPasswordExpiresAt DateTime?
  accounts               Account[]
  collaborations         ProjectCollaborator[]
  ownedProjects          Project[]             @relation("ProjectOwner")
  sessions               Session[]

  @@map("users")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@map("verification_tokens")
}

model Project {
  id            String                @id @default(cuid())
  name          String
  ownerId       String
  settings      Json?
  domainName    String?
  isPublished   Boolean               @default(false)
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt
  lastPublished DateTime?
  basicElements Element[]
  collaborators ProjectCollaborator[]
  elements      ProjectElement[]
  owner         User                  @relation("ProjectOwner", fields: [ownerId], references: [id], onDelete: Cascade)

  @@map("projects")
}

model Element {
  id        String  @id @default(cuid())
  type      String
  content   String
  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("elements")
}

model ProjectCollaborator {
  id        String   @id @default(cuid())
  projectId String
  userId    String
  role      String
  addedAt   DateTime @default(now())
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
  @@map("project_collaborators")
}

model ProjectElement {
  id              String            @id @default(cuid())
  projectId       String
  type            String
  zIndex          Int               @default(0)
  parentElementId String?
  content         Json?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  properties      ElementProperty[]
  parentElement   ProjectElement?   @relation("ElementHierarchy", fields: [parentElementId], references: [id])
  childElements   ProjectElement[]  @relation("ElementHierarchy")
  project         Project           @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("project_elements")
}

model ElementProperty {
  id        String         @id @default(cuid())
  elementId String
  styleId   String
  value     Json
  element   ProjectElement @relation(fields: [elementId], references: [id], onDelete: Cascade)
  style     ElementStyle   @relation(fields: [styleId], references: [id])

  @@map("element_properties")
}

model ElementStyle {
  id           String            @id @default(cuid())
  name         String
  category     String
  defaultValue Json
  properties   ElementProperty[]

  @@map("element_styles")
}
